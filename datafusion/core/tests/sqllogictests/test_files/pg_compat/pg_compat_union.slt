# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


onlyif postgres
statement ok
CREATE TABLE aggregate_test_100_by_sql
(
    c1  character varying NOT NULL,
    c2  smallint          NOT NULL,
    c3  smallint          NOT NULL,
    c4  smallint,
    c5  integer,
    c6  bigint            NOT NULL,
    c7  smallint          NOT NULL,
    c8  integer           NOT NULL,
    c9  bigint            NOT NULL,
    c10 character varying NOT NULL,
    c11 real              NOT NULL,
    c12 double precision  NOT NULL,
    c13 character varying NOT NULL
);

# Copy the data
onlyif postgres
statement ok
COPY aggregate_test_100_by_sql
    FROM '../../testing/data/csv/aggregate_test_100.csv'
    DELIMITER ','
    CSV HEADER;

###
## Setup test for datafusion
###
onlyif DataFusion
statement ok
CREATE EXTERNAL TABLE aggregate_test_100_by_sql (
  c1  VARCHAR NOT NULL,
  c2  TINYINT NOT NULL,
  c3  SMALLINT NOT NULL,
  c4  SMALLINT,
  c5  INT,
  c6  BIGINT NOT NULL,
  c7  SMALLINT NOT NULL,
  c8  INT NOT NULL,
  c9  BIGINT UNSIGNED NOT NULL,
  c10 VARCHAR NOT NULL,
  c11 FLOAT NOT NULL,
  c12 DOUBLE NOT NULL,
  c13 VARCHAR NOT NULL
)
STORED AS CSV
WITH HEADER ROW
LOCATION '../../testing/data/csv/aggregate_test_100.csv'


statement ok
CREATE TABLE aggregate_first_50_by_sql AS
SELECT
    *,
    CASE
        WHEN c4 % 3 = 0 THEN CAST(NULL AS INT)
        ELSE c5
    END AS n5,
    CASE
        WHEN c3 % 3 = 0 THEN CAST(NULL AS INT)
        ELSE c8
    END AS n8
FROM aggregate_test_100_by_sql
ORDER BY c6 ASC
LIMIT 50

statement ok
CREATE TABLE aggregate_last_30_by_sql AS
SELECT
    c1  AS d1,
    c2  AS d2,
    c3  AS d3,
    c4  AS d4,
    c5  AS d5,
    c6  AS d6,
    c7  AS d7,
    c8  AS d8,
    c9  AS d9,
    c10 AS d10,
    c11 AS d11,
    c12 AS d12,
    c13 AS d13,
    CASE
        WHEN c4 % 3 = 0 THEN CAST(NULL AS INT)
        ELSE c5
    END AS m5,
    CASE
        WHEN c3 % 3 = 0 THEN CAST(NULL AS INT)
        ELSE c8
    END AS m8
FROM aggregate_test_100_by_sql
ORDER BY c6 DESC
LIMIT 30

query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    EXCEPT
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
1
2
5

query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    EXCEPT ALL
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
5
5
5
5
5
5
5
5
5
5
5
5
5
5


query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    INTERSECT
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
3
4


query I rowsort
SELECT * FROM (
    SELECT c2
    FROM aggregate_test_100_by_sql t1
    INTERSECT ALL
    SELECT c2
    FROM aggregate_test_100_by_sql t2
    WHERE c2 IN (3, 4)
) s
----
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4


query I
SELECT 1 num UNION ALL SELECT 2 num ORDER BY num;
----
1
2


query I
SELECT COUNT(*) FROM (
    SELECT * FROM aggregate_first_50_by_sql
    UNION ALL
    SELECT * FROM aggregate_last_30_by_sql
) AS t
----
80


query IIIII rowsort
SELECT SUM(c5), SUM(c8), MIN(c8), MAX(c8), COUNT(c8) FROM (
    SELECT * FROM aggregate_first_50_by_sql
    UNION ALL
    SELECT * FROM aggregate_last_30_by_sql
) AS t
----
14746834907 2416214 102 64517 80


query TIIIIII rowsort
SELECT c1, c2 % 3, SUM(c5), SUM(c8), MIN(c8), MAX(c8), COUNT(c8) FROM (
    SELECT * FROM aggregate_first_50_by_sql
    UNION ALL
    SELECT * FROM aggregate_last_30_by_sql
) AS t
GROUP BY c1, c2 % 3
----
a 0 1995463085 103111 2809 33821 5
a 1 6009743082 118675 102 45465 7
a 2 -721206439 151867 2555 57885 6
b 0 323508271 79046 24770 54276 2
b 1 1999988001 123981 5382 52046 5
b 2 -2422707913 242646 11872 57594 7
c 0 -4240804374 37486 2516 34970 2
c 1 327864340 258021 12876 59663 6
c 2 -1228246286 363542 20421 57751 9
d 0 -1161076702 40971 5494 35477 2
d 1 2200738256 235467 832 64517 7
d 2 2482088983 90353 794 50842 4
e 0 4784750763 157160 20807 59134 4
e 1 2544327018 246861 299 53012 8
e 2 1852404822 167027 2684 56980 6


query IIIIII rowsort
SELECT SUM(n5), SUM(n8), MIN(n8), MAX(n8), COUNT(n5), COUNT(n8) FROM (
    SELECT * FROM aggregate_first_50_by_sql
    UNION ALL
    SELECT * FROM aggregate_last_30_by_sql
) AS t
----
-5390292847 1622897 102 64517 49 55


query TIIIIIII rowsort
SELECT c1, c2 % 3, SUM(n5), SUM(n8), MIN(n8), MAX(n8), COUNT(n5), COUNT(n8) FROM (
    SELECT * FROM aggregate_first_50_by_sql
    UNION ALL
    SELECT * FROM aggregate_last_30_by_sql
) AS t
GROUP BY c1, c2 % 3
----
a 0 -406978103 38994 2809 21463 3 3
a 1 3582528492 102898 102 45465 5 6
a 2 -1715285772 106091 20120 57885 4 3
b 0 -346989627 79046 24770 54276 1 2
b 1 1999988001 17270 7781 9489 5 2
b 2 -2496543617 135043 11872 34331 3 5
c 0 -4240804374 37486 2516 34970 2 2
c 1 -524644897 103719 48099 55620 5 2
c 2 -1033973628 276846 20421 57751 6 7
d 0 -1161076702 40971 5494 35477 2 2
d 1 -473878862 179300 17910 64517 2 4
d 2 -277731697 39511 794 24380 2 3
e 0 2753785556 157160 20807 59134 3 4
e 1 -1552248599 141535 417 53012 4 4
e 2 503560982 167027 2684 56980 2 6


query TIIIIII rowsort
SELECT c1, n8, SUM(c5), MIN(c5), MAX(c5), COUNT(c5), SUM(n8) FROM (
    SELECT * FROM aggregate_first_50_by_sql
    UNION ALL
    SELECT * FROM aggregate_last_30_by_sql
) AS t
GROUP BY c1, n8
----
a 102 383352709 383352709 383352709 1 102
a 14722 397430452 397430452 397430452 1 14722
a 15573 2106705285 2106705285 2106705285 1 15573
a 20120 370975815 370975815 370975815 1 20120
a 21463 912707948 912707948 912707948 1 21463
a 28086 586844478 586844478 586844478 1 28086
a 2809 1337043149 1337043149 1337043149 1 2809
a 363 -1813935549 -1813935549 -1813935549 1 363
a 40566 1993193190 1993193190 1993193190 1 40566
a 45465 762932956 762932956 762932956 1 45465
a 57885 -842693467 -842693467 -842693467 1 57885
a 829 2143473091 2143473091 2143473091 1 829
a NULL -1054030329 -2141451704 1489733240 6 NULL
b 11872 -629486480 -629486480 -629486480 1 11872
b 24770 670497898 670497898 670497898 1 24770
b 27034 -800561771 -800561771 -800561771 1 27034
b 27600 1188285940 1188285940 1188285940 1 27600
b 34206 41423756 41423756 41423756 1 34206
b 34331 1824882165 1824882165 1824882165 1 34331
b 54276 -346989627 -346989627 -346989627 1 54276
b 7781 -1009656194 -1009656194 -1009656194 1 7781
b 9489 994303988 994303988 994303988 1 9489
b NULL -2031911316 -2138770630 2051224722 5 NULL
c 20421 -1927628110 -1927628110 -1927628110 1 20421
c 2516 -2098805236 -2098805236 -2098805236 1 2516
c 29527 -1011669561 -1011669561 -1011669561 1 29527
c 31648 -537142430 -537142430 -537142430 1 31648
c 34970 -2141999138 -2141999138 -2141999138 1 34970
c 40622 2025611582 2025611582 2025611582 1 40622
c 43062 2033001162 2033001162 2033001162 1 43062
c 48099 -644225469 -644225469 -644225469 1 48099
c 53815 1354539333 1354539333 1354539333 1 53815
c 55620 -237425046 -237425046 -237425046 1 55620
c 57751 -134213907 -134213907 -134213907 1 57751
c NULL -1821229500 -1882293856 1579876740 6 NULL
d 14337 706441268 706441268 706441268 1 14337
d 17910 -1176490478 -1176490478 -1176490478 1 17910
d 24380 -108973366 -108973366 -108973366 1 24380
d 35477 -1302295658 -1302295658 -1302295658 1 35477
d 39363 702611616 702611616 702611616 1 39363
d 5494 141218956 141218956 141218956 1 5494
d 57510 -335410409 -335410409 -335410409 1 57510
d 64517 -1383162419 -1383162419 -1383162419 1 64517
d 794 -168758331 -168758331 -168758331 1 794
d NULL 6446569358 1188089983 2053379412 4 NULL
e 12757 -587831330 -587831330 -587831330 1 12757
e 20807 1738331255 1738331255 1738331255 1 20807
e 2684 -467659022 -467659022 -467659022 1 2684
e 32712 -421042466 -421042466 -421042466 1 32712
e 35106 2064155045 2064155045 2064155045 1 35106
e 4168 -1090239422 -1090239422 -1090239422 1 4168
e 417 1544188174 1544188174 1544188174 1 417
e 44507 1436496767 1436496767 1436496767 1 44507
e 45185 1593800404 1593800404 1593800404 1 45185
e 45253 1689098844 1689098844 1689098844 1 45253
e 53000 2047637360 2047637360 2047637360 1 53000
e 53012 -1339586153 -1339586153 -1339586153 1 53012
e 56980 715235348 715235348 715235348 1 56980
e 59134 2030965207 2030965207 2030965207 1 59134
e NULL -1772067408 -1331533190 427197269 4 NULL


########
# Clean up after the test
########
statement ok
DROP TABLE aggregate_test_100_by_sql

statement ok
DROP TABLE aggregate_first_50_by_sql

statement ok
DROP TABLE aggregate_last_30_by_sql
