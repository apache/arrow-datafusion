# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Create a source where there is multiple orderings.
statement ok
CREATE EXTERNAL TABLE multiple_ordered_table (
  a0 INTEGER,
  a INTEGER,
  b INTEGER,
  c INTEGER,
  d INTEGER
)
STORED AS CSV
WITH HEADER ROW
WITH ORDER (a ASC, b ASC)
WITH ORDER (c ASC)
LOCATION '../core/tests/data/window_2.csv';

# test for substitute CAST scenario
query TT
EXPLAIN
SELECT 
    CAST(a AS BIGINT) AS a_big,
    b
FROM multiple_ordered_table
ORDER BY a_big ASC, b ASC;
----
logical_plan
Sort: a_big ASC NULLS LAST, multiple_ordered_table.b ASC NULLS LAST
--Projection: CAST(multiple_ordered_table.a AS Int64) AS a_big, multiple_ordered_table.b
----TableScan: multiple_ordered_table projection=[a, b]
physical_plan
SortPreservingMergeExec: [a_big@0 ASC NULLS LAST,b@1 ASC NULLS LAST]
--ProjectionExec: expr=[CAST(a@0 AS Int64) as a_big, b@1 as b]
----RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/core/tests/data/window_2.csv]]}, projection=[a, b], output_ordering=[a@0 ASC NULLS LAST, b@1 ASC NULLS LAST], has_header=true

query TT
EXPLAIN
SELECT a, CAST(a AS BIGINT) AS a_big, b
FROM multiple_ordered_table
ORDER BY a ASC, b ASC;
----
logical_plan
Sort: multiple_ordered_table.a ASC NULLS LAST, multiple_ordered_table.b ASC NULLS LAST
--Projection: multiple_ordered_table.a, CAST(multiple_ordered_table.a AS Int64) AS a_big, multiple_ordered_table.b
----TableScan: multiple_ordered_table projection=[a, b]
physical_plan
SortPreservingMergeExec: [a@0 ASC NULLS LAST,b@2 ASC NULLS LAST]
--ProjectionExec: expr=[a@0 as a, CAST(a@0 AS Int64) as a_big, b@1 as b]
----RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/core/tests/data/window_2.csv]]}, projection=[a, b], output_ordering=[a@0 ASC NULLS LAST, b@1 ASC NULLS LAST], has_header=true

# TODO: Should generate without SortExec
query TT
EXPLAIN
SELECT a, CAST(a AS BIGINT) AS a_big, b
FROM multiple_ordered_table
ORDER BY a_big ASC, b ASC;
----
logical_plan
Sort: a_big ASC NULLS LAST, multiple_ordered_table.b ASC NULLS LAST
--Projection: multiple_ordered_table.a, CAST(multiple_ordered_table.a AS Int64) AS a_big, multiple_ordered_table.b
----TableScan: multiple_ordered_table projection=[a, b]
physical_plan
SortPreservingMergeExec: [a_big@1 ASC NULLS LAST,b@2 ASC NULLS LAST]
--ProjectionExec: expr=[a@0 as a, CAST(a@0 AS Int64) as a_big, b@1 as b]
----RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/core/tests/data/window_2.csv]]}, projection=[a, b], output_ordering=[a@0 ASC NULLS LAST, b@1 ASC NULLS LAST], has_header=true

# test for common rename
query TT
EXPLAIN
SELECT a, a AS a_big, b
FROM multiple_ordered_table
ORDER BY a_big ASC, b ASC;
----
logical_plan
Sort: a_big ASC NULLS LAST, multiple_ordered_table.b ASC NULLS LAST
--Projection: multiple_ordered_table.a, multiple_ordered_table.a AS a_big, multiple_ordered_table.b
----TableScan: multiple_ordered_table projection=[a, b]
physical_plan
ProjectionExec: expr=[a@0 as a, a@0 as a_big, b@1 as b]
--CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/core/tests/data/window_2.csv]]}, projection=[a, b], output_ordering=[a@0 ASC NULLS LAST, b@1 ASC NULLS LAST], has_header=true

query TT
EXPLAIN
SELECT a, a AS a_big, b
FROM multiple_ordered_table
ORDER BY a ASC, b ASC;
----
logical_plan
Sort: multiple_ordered_table.a ASC NULLS LAST, multiple_ordered_table.b ASC NULLS LAST
--Projection: multiple_ordered_table.a, multiple_ordered_table.a AS a_big, multiple_ordered_table.b
----TableScan: multiple_ordered_table projection=[a, b]
physical_plan
ProjectionExec: expr=[a@0 as a, a@0 as a_big, b@1 as b]
--CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/core/tests/data/window_2.csv]]}, projection=[a, b], output_ordering=[a@0 ASC NULLS LAST, b@1 ASC NULLS LAST], has_header=true


# test for cast Utf8
query TT
EXPLAIN
SELECT 
    CAST(a AS STRING) AS a_str,
    b
FROM multiple_ordered_table
ORDER BY a_str ASC, b ASC;
----
logical_plan
Sort: a_str ASC NULLS LAST, multiple_ordered_table.b ASC NULLS LAST
--Projection: CAST(multiple_ordered_table.a AS Utf8) AS a_str, multiple_ordered_table.b
----TableScan: multiple_ordered_table projection=[a, b]
physical_plan
SortPreservingMergeExec: [a_str@0 ASC NULLS LAST,b@1 ASC NULLS LAST]
--SortExec: expr=[a_str@0 ASC NULLS LAST,b@1 ASC NULLS LAST]
----ProjectionExec: expr=[CAST(a@0 AS Utf8) as a_str, b@1 as b]
------RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
--------CsvExec: file_groups={1 group: [[WORKSPACE_ROOT/datafusion/core/tests/data/window_2.csv]]}, projection=[a, b], output_ordering=[a@0 ASC NULLS LAST, b@1 ASC NULLS LAST], has_header=true
