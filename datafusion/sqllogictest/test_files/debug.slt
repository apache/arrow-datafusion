# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

############################
# Unnest Expressions Tests #
############################

statement ok
CREATE TABLE unnest_table
AS VALUES
    ([1,2,3], struct(['a','b'],'b'))
;

statement ok
CREATE TABLE nested_unnest_table
AS VALUES 
    (struct('a', 'b', struct('c')), (struct('a', 'b', [10,20])), [struct('a', 'b')]), 
    (struct('d', 'e', struct('f')), (struct('x', 'y', [30,40, 50])), null)
;



statement ok
CREATE TABLE temp
AS VALUES 
    ([struct([1])])
;

query I
select unnest(unnest(column1)['c0']) from temp;
----
1


query I
select * from unnest(unnest(
    [struct([1,2,3]),struct([4,5,6])]
)['c0']);
----
1
2
3
4
5
6

query I
select * from unnest(unnest([[1,2,3],[4,5,6]]));
----
1
2
3
4
5
6


query TT
explain select unnest(unnest(column1)['c0']) from temp;
----
logical_plan
01)Unnest: lists[unnest(unnest(temp.column1)[c0])] structs[]
02)--Projection: get_field(unnest(temp.column1), Utf8("c0")) AS unnest(unnest(temp.column1)[c0])
03)----Unnest: lists[unnest(temp.column1)] structs[]
04)------Projection: temp.column1 AS unnest(temp.column1)
05)--------TableScan: temp projection=[column1]
physical_plan
01)UnnestExec
02)--ProjectionExec: expr=[get_field(unnest(temp.column1)@0, c0) as unnest(unnest(temp.column1)[c0])]
03)----RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1
04)------UnnestExec
05)--------ProjectionExec: expr=[column1@0 as unnest(temp.column1)]
06)----------MemoryExec: partitions=1, partition_sizes=[1]